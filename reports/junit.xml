<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="29" failures="0" errors="0" time="6.043">
  <testsuite name="test/account/account-service.spec.ts" errors="0" failures="0" skipped="0" timestamp="2024-07-12T06:43:58" time="4.683" tests="15">
    <testcase classname="AccountService-should be defined" name="AccountService-should be defined" time="0.009">
    </testcase>
    <testcase classname="AccountService › createAccount-successfully create =&gt; Should create a new account, hash password and return its data" name="AccountService › createAccount-successfully create =&gt; Should create a new account, hash password and return its data" time="0.004">
    </testcase>
    <testcase classname="AccountService › getAccount by id-should successfully return a valid account given a valid account uuid" name="AccountService › getAccount by id-should successfully return a valid account given a valid account uuid" time="0.001">
    </testcase>
    <testcase classname="AccountService › getAccount by id-should return an error if account not found" name="AccountService › getAccount by id-should return an error if account not found" time="0.01">
    </testcase>
    <testcase classname="AccountService › getAccounts by ids-should successfully return a valid accounts given valid account uuids" name="AccountService › getAccounts by ids-should successfully return a valid accounts given valid account uuids" time="0.001">
    </testcase>
    <testcase classname="AccountService › getAccounts by ids-should return an error if account not found" name="AccountService › getAccounts by ids-should return an error if account not found" time="0.001">
    </testcase>
    <testcase classname="AccountService › updateAccount-should the password be cached if it is provided with other data, and the account data should be updated" name="AccountService › updateAccount-should the password be cached if it is provided with other data, and the account data should be updated" time="0.003">
    </testcase>
    <testcase classname="AccountService › updateAccount-should throw an HttpException if update fails" name="AccountService › updateAccount-should throw an HttpException if update fails" time="0.001">
    </testcase>
    <testcase classname="AccountService › createAccount-successfully create =&gt; Should create a new account, hash password and return its data" name="AccountService › createAccount-successfully create =&gt; Should create a new account, hash password and return its data" time="0.002">
    </testcase>
    <testcase classname="AccountService › getAccount by id-should successfully return a valid account given a valid account uuid" name="AccountService › getAccount by id-should successfully return a valid account given a valid account uuid" time="0.001">
    </testcase>
    <testcase classname="AccountService › getAccount by id-should return an error if account not found" name="AccountService › getAccount by id-should return an error if account not found" time="0.001">
    </testcase>
    <testcase classname="AccountService › getAccounts by ids-should successfully return a valid accounts given valid account uuids" name="AccountService › getAccounts by ids-should successfully return a valid accounts given valid account uuids" time="0.001">
    </testcase>
    <testcase classname="AccountService › getAccounts by ids-should return an error if account not found" name="AccountService › getAccounts by ids-should return an error if account not found" time="0.001">
    </testcase>
    <testcase classname="AccountService › updateAccount-should the password be cached if it is provided with other data, and the account data should be updated" name="AccountService › updateAccount-should the password be cached if it is provided with other data, and the account data should be updated" time="0.001">
    </testcase>
    <testcase classname="AccountService › updateAccount-should throw an HttpException if update fails" name="AccountService › updateAccount-should throw an HttpException if update fails" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="test/auth/auth-service.spec.ts" errors="0" failures="0" skipped="0" timestamp="2024-07-12T06:43:58" time="5.368" tests="14">
    <testcase classname="AuthService-should be defined" name="AuthService-should be defined" time="0.008">
    </testcase>
    <testcase classname="AuthService › singUp-successfully signUp =&gt; Should singUp a new account return its data" name="AuthService › singUp-successfully signUp =&gt; Should singUp a new account return its data" time="0.003">
    </testcase>
    <testcase classname="AuthService › singUp-unsuccessfully singUp (account already existed) =&gt; Should return an error" name="AuthService › singUp-unsuccessfully singUp (account already existed) =&gt; Should return an error" time="0.009">
    </testcase>
    <testcase classname="AuthService › singUp-unsuccessfully singUp (creation of account failed) =&gt; Should return an error" name="AuthService › singUp-unsuccessfully singUp (creation of account failed) =&gt; Should return an error" time="0.001">
    </testcase>
    <testcase classname="AuthService › singIn-successfully singIn by Email =&gt; Should create jwtTokens and return them" name="AuthService › singIn-successfully singIn by Email =&gt; Should create jwtTokens and return them" time="0.002">
    </testcase>
    <testcase classname="AuthService › singIn-successfully singIn by Phone =&gt; Should create jwtTokens and return them" name="AuthService › singIn-successfully singIn by Phone =&gt; Should create jwtTokens and return them" time="0.001">
    </testcase>
    <testcase classname="AuthService › singIn-unsuccessfully singIn (Not found account by phone or email) =&gt; Should create jwtTokens and return them" name="AuthService › singIn-unsuccessfully singIn (Not found account by phone or email) =&gt; Should create jwtTokens and return them" time="0.001">
    </testcase>
    <testcase classname="AuthService › validateAccount-successfully validate account =&gt; Should find account by email and check password" name="AuthService › validateAccount-successfully validate account =&gt; Should find account by email and check password" time="0.002">
    </testcase>
    <testcase classname="AuthService › validateAccount-unsuccessfully validate account (email is null) =&gt; Should throw an error " name="AuthService › validateAccount-unsuccessfully validate account (email is null) =&gt; Should throw an error " time="0.007">
    </testcase>
    <testcase classname="AuthService › validateAccount-unsuccessfully validate account (account not found) =&gt; Should throw an error" name="AuthService › validateAccount-unsuccessfully validate account (account not found) =&gt; Should throw an error" time="0.001">
    </testcase>
    <testcase classname="AuthService › validateAccount-unsuccessfully validate account (password is wrong) =&gt; Should throw an error" name="AuthService › validateAccount-unsuccessfully validate account (password is wrong) =&gt; Should throw an error" time="0.001">
    </testcase>
    <testcase classname="AuthService › refresh-successfully refresh tokens =&gt; Should return new tokens" name="AuthService › refresh-successfully refresh tokens =&gt; Should return new tokens" time="0.001">
    </testcase>
    <testcase classname="AuthService › refresh-unsuccessfully refresh tokens (failed verification) =&gt; Should throw an error" name="AuthService › refresh-unsuccessfully refresh tokens (failed verification) =&gt; Should throw an error" time="0.001">
    </testcase>
    <testcase classname="AuthService-logout =&gt; Should return delete refresh token from db and return its payload" name="AuthService-logout =&gt; Should return delete refresh token from db and return its payload" time="0.001">
    </testcase>
  </testsuite>
</testsuites>